<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2009-2019 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>MyBatis 3 | Statement Builders</title>
    <author email="clinton.begin@gmail.com">Clinton Begin</author>
    <author email="eduardo.macarron@gmail.com">Eduardo Macarron</author>
  </properties>

  <body>
  <section name="The SQL Builder Class">
  <subsection name="El Problema">
  <p>Una de las cosas más tediosas que un programador Java puede llegar a tener que hacer es incluir código SQL en código Java. Normalmente esto se hace cuando es necesario generar dinámicamente el SQL – de otra forma podrías externalizar el código en un fichero o un procedimiento almacenado. Como ya has visto, MyBatis tiene una respuesta potente a la generación dinámica de SQL mediante las capacidades del mapeo XML. Sin embargo, en ocasiones se hace necesario construir una sentencia SQL dentro del código Java. En este caso, MyBatis tiene una funcionalidad más para ayudarte en ello, antes de que comiences con el típico lío de signos de suma, comillas, líneas nuevas, problemas de formato y condicionales anidados para tratar con las comas extra y las conjunciones AND… Realmente, generar código dinámico en java, puede ser una verdadera pesadilla. Por ejemplo:</p>
<source><![CDATA[
String sql = "SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, "
"P.LAST_NAME,P.CREATED_ON, P.UPDATED_ON " +
"FROM PERSON P, ACCOUNT A " +
"INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID " +
"INNER JOIN COMPANY C on D.COMPANY_ID = C.ID " +
"WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) " +
"OR (P.LAST_NAME like ?) " +
"GROUP BY P.ID " +
"HAVING (P.LAST_NAME like ?) " +
"OR (P.FIRST_NAME like ?) " +
"ORDER BY P.ID, P.FULL_NAME";
]]></source>
  </subsection>

  <subsection name="La Solución">
  <p>MyBatis 3 introduce un concepto un tanto distinto para tratar con el problema.
    Con la clase SQL, puecdes crear una sentencia SQL en un sólo paso invocando a sus métodos.
    El ejemplo anterior tendría este aspecto si se rescribe con la clase SQL:
  </p>

      <source><![CDATA[
private String selectPersonSql() {
  return new SQL() {{
    SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME");
    SELECT("P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON");
    FROM("PERSON P");
    FROM("ACCOUNT A");
    INNER_JOIN("DEPARTMENT D on D.ID = P.DEPARTMENT_ID");
    INNER_JOIN("COMPANY C on D.COMPANY_ID = C.ID");
    WHERE("P.ID = A.ID");
    WHERE("P.FIRST_NAME like ?");
    OR();
    WHERE("P.LAST_NAME like ?");
    GROUP_BY("P.ID");
    HAVING("P.LAST_NAME like ?");
    OR();
    HAVING("P.FIRST_NAME like ?");
    ORDER_BY("P.ID");
    ORDER_BY("P.FULL_NAME");
  }}.toString();
}
]]></source>
    <p>¿Qué hay de especial en este ejemplo?
      Bien, si lo miras detenidamente, verás que no hay que preocuparse de duplicar “AND”s, o elegir entre “WHERE” o “AND”, o ninguno de ambos!
      La clase SQL se ocupa de colocar el "WHERE" donde debe de ir, si debe usarse "AND" o no y de realizar todas las concatenaciones de Strings.
    </p>
    </subsection>
      <subsection name="La clase SQL">

        <p>Aqui van algunos ejemplos:</p>

        <source><![CDATA[
// Anonymous inner class
public String deletePersonSql() {
  return new SQL() {{
    DELETE_FROM("PERSON");
    WHERE("ID = #{id}");
  }}.toString();
}

// Builder / Fluent style
public String insertPersonSql() {
  String sql = new SQL()
    .INSERT_INTO("PERSON")
    .VALUES("ID, FIRST_NAME", "#{id}, #{firstName}")
    .VALUES("LAST_NAME", "#{lastName}")
    .toString();
  return sql;
}

// With conditionals (note the final parameters, required for the anonymous inner class to access them)
public String selectPersonLike(final String id, final String firstName, final String lastName) {
  return new SQL() {{
    SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME");
    FROM("PERSON P");
    if (id != null) {
      WHERE("P.ID like #{id}");
    }
    if (firstName != null) {
      WHERE("P.FIRST_NAME like #{firstName}");
    }
    if (lastName != null) {
      WHERE("P.LAST_NAME like #{lastName}");
    }
    ORDER_BY("P.LAST_NAME");
  }}.toString();
}

public String deletePersonSql() {
  return new SQL() {{
    DELETE_FROM("PERSON");
    WHERE("ID = #{id}");
  }}.toString();
}

public String insertPersonSql() {
  return new SQL() {{
    INSERT_INTO("PERSON");
    VALUES("ID, FIRST_NAME", "#{id}, #{firstName}");
    VALUES("LAST_NAME", "#{lastName}");
  }}.toString();
}

public String updatePersonSql() {
  return new SQL() {{
    UPDATE("PERSON");
    SET("FIRST_NAME = #{firstName}");
    WHERE("ID = #{id}");
  }}.toString();
}
]]></source>

        <table>
          <thead>
            <tr>
              <th>Metodo</th>
              <th>Descripción</th>
            </tr>
          </thead>
          <tbody>
  <tr>
    <td>
      <ul>
        <li>
          <code>SELECT(String)</code>
        </li>
        <li>
          <code>SELECT(String...)</code>
        </li>
      </ul>
    </td>
    <td>Comienza o añade a una sentencia SELECT. Se puede invocar más de una vez y los parámetros se irán añadiendo a la sentencia SELECT. Los parámetros son normalmente una lista de columnas o alias separados por comas, pero puede ser cualquier cosa que acepte el driver de base de datos.</td>
  </tr>
  <tr>
    <td>
      <ul>
        <li>
          <code>SELECT_DISTINCT(String)</code>
        </li>
        <li>
          <code>SELECT_DISTINCT(String...)</code>
        </li>
      </ul>
    </td>
    <td>Comienza o añade a una sentencia SELECT, también añade la palabra clave “DISTINCT” a la sentencia generada. Se puede invocar más de una vez y los parámetros se irán añadiendo a la sentencia SELECT. Los parámetros son normalmente una lista de columnas o alias separados por comas, pero puede ser cualquier cosa que acepte el driver de base de datos.</td>
  </tr>
  <tr>
    <td>
      <ul>
        <li>
          <code>FROM(String)</code>
        </li>
        <li>
          <code>FROM(String...)</code>
        </li>
      </ul>
    </td>
    <td>Comienza o añade a una cláusula FROM. Se puede invocar más de una vez y los parámetros se irán añadiendo a la clausula FROM. Los parámetros son normalmente un nombre de tabla o alias o cualquier cosa que acepte el driver de base de datos.</td>
  </tr>
  <tr>
    <td>
      <ul>
        <li>
          <code>JOIN(String)</code>
        </li>
        <li>
          <code>JOIN(String...)</code>
        </li>
        <li>
          <code>INNER_JOIN(String)</code>
        </li>
        <li>
          <code>INNER_JOIN(String...)</code>
        </li>
        <li>
          <code>LEFT_OUTER_JOIN(String)</code>
        </li>
        <li>
          <code>LEFT_OUTER_JOIN(String...)</code>
        </li>
        <li>
          <code>RIGHT_OUTER_JOIN(String)</code>
        </li>
        <li>
          <code>RIGHT_OUTER_JOIN(String...)</code>
        </li>
      </ul>
    </td>
    <td>Añade una nueva clausula JOIN del tipo apropiado, dependiendo al método que se haya llamado. El parámetro puede incluir un join estándar que consiste en las columnas y las condiciones sobre las que hacer la join.</td>
  </tr>
  <tr>
    <td>
      <ul>
        <li>
          <code>WHERE(String)</code>
        </li>
        <li>
          <code>WHERE(String...)</code>
        </li>
      </ul>
    </td>
    <td>Añade una nueva condición a la clausula WHERE concatenada con un AND. Puede llamarse más de una vez, lo cual hará que se añadan más condiciones todas ellas concatenadas con un AND. O usa OR() para partirlas con un OR().</td>
  </tr>
  <tr>
    <td>
      <code>OR()</code>
    </td>
    <td>Parte las condiciones actuales de la WHERE con un OR. Puede llamarse más de una vez, pero llamarlas más de una vez en la misma línea puede producir sentencias incorrectas.</td>
  </tr>
  <tr>
    <td>
      <code>AND()</code>
    </td>
    <td>Parte las condiciones actuales de la WHERE con un AND. Puede llamarse más de una vez, pero llamarlas más de una vez en la misma línea puede producir sentencias incorrectas.  Dado que WHERE y HAVING concatenan automáticamente el AND, es muy infrecuente que sea necesario invocar a este método y se incluye realmente por completitud.</td>
  </tr>
  <tr>
    <td>
      <ul>
        <li>
          <code>GROUP_BY(String)</code>
        </li>
        <li>
          <code>GROUP_BY(String...)</code>
        </li>
      </ul>
    </td>
    <td>Añade una nueva clausula GROUP BY grupo, concatenada con una coma. Se le puede llamar más de una vez, lo cual hará que se concatenen nuevas condiciones separadas también por coma.</td>
  </tr>
  <tr>
    <td>
      <ul>
        <li>
          <code>HAVING(String)</code>
        </li>
        <li>
          <code>HAVING(String...)</code>
        </li>
      </ul>
    </td>
    <td>Añade una nueva clausula HAVING, concatenada con un AND. Se le puede llamar más de una vez, lo cual hará que se concatenen nuevas condiciones separadas también por AND. Usa OR() para dividirlas por OR.</td>
  </tr>
  <tr>
    <td>
      <ul>
        <li>
          <code>ORDER_BY(String)</code>
        </li>
        <li>
          <code>ORDER_BY(String...)</code>
        </li>
      </ul>
    </td>
    <td>Añade un Nuevo elemento a la clausula ORDER BY concatenado por coma. Se le puede llamar más de una vez, lo cual hará que se concatenen nuevas condiciones separadas también por coma.</td>
  </tr>
  <tr>
    <td>
      <ul>
        <li>
          <code>LIMIT(String)</code>
        </li>
        <li>
          <code>LIMIT(int)</code>
        </li>
      </ul>
    </td>
    <td>
      Appends a <code>LIMIT</code> clause.
      This method valid when use together with SELECT(), UPDATE() and DELETE().
      And this method is designed to use together with OFFSET() when use SELECT(). (Available since 3.5.2)
    </td>
  </tr>
  <tr>
    <td>
      <ul>
        <li>
          <code>OFFSET(String)</code>
        </li>
        <li>
          <code>OFFSET(long)</code>
        </li>
      </ul>
    </td>
    <td>
      Appends a <code>OFFSET</code> clause.
      This method valid when use together with SELECT().
      And this method is designed to use together with LIMIT(). (Available since 3.5.2)
    </td>
  </tr>
  <tr>
    <td>
      <ul>
        <li>
          <code>OFFSET_ROWS(String)</code>
        </li>
        <li>
          <code>OFFSET_ROWS(long)</code>
        </li>
      </ul>
    </td>
    <td>
      Appends a <code>OFFSET n ROWS</code> clause.
      This method valid when use together with SELECT().
      And this method is designed to use together with FETCH_FIRST_ROWS_ONLY(). (Available since 3.5.2)
    </td>
  </tr>
  <tr>
    <td>
      <ul>
        <li>
          <code>FETCH_FIRST_ROWS_ONLY(String)</code>
        </li>
        <li>
          <code>FETCH_FIRST_ROWS_ONLY(int)</code>
        </li>
      </ul>
    </td>
    <td>
      Appends a <code>FETCH FIRST n ROWS ONLY</code> clause.
      This method valid when use together with SELECT().
      And this method is designed to use together with OFFSET_ROWS(). (Available since 3.5.2)
    </td>
  </tr>
  <tr>
    <td>
      <code>DELETE_FROM(String)</code>
    </td>
    <td>Comienza una sentencia delete y especifica la tabla donde borrar. Generalmente suele ir seguida de una clausula WHERE!
    </td>
  </tr>
  <tr>
    <td>
      <code>INSERT_INTO(String)</code>
    </td>
    <td>Comienza una sentencia insert y especifica al tabla en la que insertar. Suele ir seguida de una o más llamadas a VALUES() o INTO_COLUMNS() y INTO_VALUES().
    </td>
  </tr>
  <tr>
    <td>
      <ul>
        <li>
          <code>SET(String)</code>
        </li>
        <li>
          <code>SET(String...)</code>
        </li>
      </ul>
    </td>
    <td>Añade a la lista “set” de una update.</td>
  </tr>
  <tr>
    <td>
      <code>UPDATE(String)</code>
    </td>
    <td>Comienza una sentencia update y especifica la tabla que modificar Suele ir seguida de una o más llamadas a SET() y normalmente de una llamada a WHERE().</td>
  </tr>
  <tr>
    <td>
      <code>VALUES(String, String)</code>
    </td>
    <td>Añade a una sentencia insert. El primer parámetro es el nombre de columna y el Segundo el valor(es).</td>
  </tr>
  <tr>
    <td>
      <code>INTO_COLUMNS(String...)</code>
    </td>
    <td>
      Appends columns phrase to an insert statement.
      This should be call INTO_VALUES() with together.
    </td>
  </tr>
  <tr>
    <td>
      <code>INTO_VALUES(String...)</code>
    </td>
    <td>
      Appends values phrase to an insert statement.
      This should be call INTO_COLUMNS() with together.
    </td>
  </tr>
  <tr>
    <td>
      <code>ADD_ROW()</code>
    </td>
    <td>
      Add new row for bulk insert. (Available since 3.5.2)
    </td>
  </tr>
          </tbody>
        </table>

        <p>
          <span class="label important">NOTE</span>
          It is important to note that SQL class writes <code>LIMIT</code>, <code>OFFSET</code>, <code>OFFSET n ROWS</code> and <code>FETCH FIRST n ROWS ONLY</code> clauses into the generated statement as is.
          In other words, the library does not attempt to normalize those values for databases that don’t support these clauses directly.
          Therefore, it is very important for users to understand whether or not the target database supports these clauses.
          If the target database does not support these clauses, then it is likely that using this support will create SQL that has runtime errors.
        </p>

        <p>Since version 3.4.2, you can use variable-length arguments as follows:</p>

<source><![CDATA[
public String selectPersonSql() {
  return new SQL()
    .SELECT("P.ID", "A.USERNAME", "A.PASSWORD", "P.FULL_NAME", "D.DEPARTMENT_NAME", "C.COMPANY_NAME")
    .FROM("PERSON P", "ACCOUNT A")
    .INNER_JOIN("DEPARTMENT D on D.ID = P.DEPARTMENT_ID", "COMPANY C on D.COMPANY_ID = C.ID")
    .WHERE("P.ID = A.ID", "P.FULL_NAME like #{name}")
    .ORDER_BY("P.ID", "P.FULL_NAME")
    .toString();
}

public String insertPersonSql() {
  return new SQL()
    .INSERT_INTO("PERSON")
    .INTO_COLUMNS("ID", "FULL_NAME")
    .INTO_VALUES("#{id}", "#{fullName}")
    .toString();
}

public String updatePersonSql() {
  return new SQL()
    .UPDATE("PERSON")
    .SET("FULL_NAME = #{fullName}", "DATE_OF_BIRTH = #{dateOfBirth}")
    .WHERE("ID = #{id}")
    .toString();
}
]]></source>

        <p>Since version 3.5.2, you can create insert statement for bulk insert as follow:</p>

        <source><![CDATA[
public String insertPersonsSql() {
  // INSERT INTO PERSON (ID, FULL_NAME)
  //     VALUES (#{mainPerson.id}, #{mainPerson.fullName}) , (#{subPerson.id}, #{subPerson.fullName})
  return new SQL()
    .INSERT_INTO("PERSON")
    .INTO_COLUMNS("ID", "FULL_NAME")
    .INTO_VALUES("#{mainPerson.id}", "#{mainPerson.fullName}")
    .ADD_ROW()
    .INTO_VALUES("#{subPerson.id}", "#{subPerson.fullName}")
    .toString();
}
]]></source>

        <p>Since version 3.5.2, you can create select statement for limiting search result rows clause as follow:</p>

        <source><![CDATA[
public String selectPersonsWithOffsetLimitSql() {
  // SELECT id, name FROM PERSON
  //     LIMIT #{limit} OFFSET #{offset}
  return new SQL()
    .SELECT("id", "name")
    .FROM("PERSON")
    .LIMIT("#{limit}")
    .OFFSET("#{offset}")
    .toString();
}

public String selectPersonsWithFetchFirstSql() {
  // SELECT id, name FROM PERSON
  //     OFFSET #{offset} ROWS FETCH FIRST #{limit} ROWS ONLY
  return new SQL()
    .SELECT("id", "name")
    .FROM("PERSON")
    .OFFSET_ROWS("#{offset}")
    .FETCH_FIRST_ROWS_ONLY("#{limit}")
    .toString();
}
]]></source>

      </subsection>

      <subsection name="SqlBuilder y SelectBuilder (DEPRECADAS)">
        <p>
          En versiones anteriores a la 3.2 optamos por una solución distinta, usando una variable ThreadLocal para
          resolver algunas limitaciones de las que hacen los DSLs Java algo incomodos. Sin embargo, esta solución está ahora
          desprecada porque los frameworks actuales están mas orientados a usar patrones builder-type y clases anónimas
          interas para este tipo de cosas. Por lo tanto las clases SelectBuilder y SqlBuilder están ahora deprecadas.
        </p>
        <p>
          Los siguientes métodos aplican solo a las clases deprecadas SqlBuilder y SelectBuilder.
        </p>
        <table>
        <thead>
          <tr>
            <th>Método</th>
            <th>Descripción</th>
          </tr>
        </thead>
        <tbody>
  <tr>
    <td>
      <code>BEGIN()</code> / <code>RESET()</code>
    </td>
    <td>Estos métodos limpian estado guardad en el ThreadLocal de la clase SelectBuilder, y la preparan para construir una nueva sentencia. BEGIN() se lee mejor cuando se está creando una sentencia. RESET() se lee mejor cuando se está borrando lo hecho anteriormente en medio de una ejecución (quizá porque la lógica necesita una sentencia completamente distinta según las condiciones).</td>
  </tr>
  <tr>
    <td>
      <code>SQL()</code>
    </td>
    <td>Devuelve la SQL generada y restablece el estado del SelectBuilder (como si se hubiera llamado a un BEGIN() o a un RESET()). Por tanto este método solo se puede llamar una vez!</td>
  </tr>
        </tbody>
        </table>

  <p>La clase SelectBuilder no es mágica, pero es importante que conozcas cómo funcionan.
  SelectBuilder y SqlBuilder usan una combinación de imports estáticos y una variable ThreadLocal para permitir una sintaxis más limpia más fácilmente usabe con condicionales.
  Para usarlas debes importar estáticamente métodos de las siguientes clases (uno u otro, no ambos):</p>

        <source>import static org.apache.ibatis.jdbc.SelectBuilder.*;</source>
        <source>import static org.apache.ibatis.jdbc.SqlBuilder.*;</source>

        <p>De esta forma podrás crear métodos como estos:</p>

        <source><![CDATA[
/* DEPRECATED */
public String selectBlogsSql() {
  BEGIN(); // Clears ThreadLocal variable
  SELECT("*");
  FROM("BLOG");
  return SQL();
}
        ]]></source>

        <source><![CDATA[
/* DEPRECATED */
private String selectPersonSql() {
  BEGIN(); // Clears ThreadLocal variable
  SELECT("P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME");
  SELECT("P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON");
  FROM("PERSON P");
  FROM("ACCOUNT A");
  INNER_JOIN("DEPARTMENT D on D.ID = P.DEPARTMENT_ID");
  INNER_JOIN("COMPANY C on D.COMPANY_ID = C.ID");
  WHERE("P.ID = A.ID");
  WHERE("P.FIRST_NAME like ?");
  OR();
  WHERE("P.LAST_NAME like ?");
  GROUP_BY("P.ID");
  HAVING("P.LAST_NAME like ?");
  OR();
  HAVING("P.FIRST_NAME like ?");
  ORDER_BY("P.ID");
  ORDER_BY("P.FULL_NAME");
  return SQL();
}
        ]]></source>

      </subsection>
  </section>
  </body>

</document>
